{"version":3,"sources":["../../src/listings.js"],"names":["apiAgent","Photos","require","__dirname","Listing","fbpromises","ssloptions","key","readFileSync","cert","ca","app","createServer","listen","requests","results","listings","access_token","refresh_token","code","expires_at","fbagentid","clientId","clientSecret","redirectUrl","getListingsWith","requestOption","fetchJSON","url","console","log","Promise","resolve","reject","setTimeout","catch","err","message","getListings","pages","ops","res","lops","page","pageReq","Object","assign","qs","_page","push","allops","map","getListingJSON","all","then","dataresults","forEach","parsedBody","entries","D","Results","Pagination","saveListings","send","get","req","idx","clearresults","removeall","zipcode","params","options","pr","reqrequire","json","xhr","status","savePhotoData","entry","listingKey","photoData","copy","ResourceUri","Id","Name","Caption","UriThumb","Uri300","Uri640","Uri800","Uri1024","Uri1280","Uri1600","Uri2048","UriLarge","Primary","updates","listing","listjson","newListingKey","listingExists","addr","thefilter"],"mappings":"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","file":"listings.js","sourcesContent":["// import jsonfile from 'jsonfile';\nimport express from \"express\";\n// import fb from \"firebase\";\nimport rp from \"request-promise\";\nimport https from \"https\";\nimport fs from \"fs\";\nimport 'whatwg-fetch';\n// import geofire from 'geofire';\nimport saveFlat from \"./saveflat\";\nimport SparkApiAuth from './sparkapiauth'\nconst apiAgent = \"IDX Agent\";\nvar Photos = require(__dirname+'/models/photos.js');\nvar Listing  = require(__dirname+'/models/listing.js');\nvar fbpromises = [];\nvar ssloptions = {\n    key: fs.readFileSync(__dirname + '/../private/letsencrypt-key.pem'),\n    cert: fs.readFileSync(__dirname + '/../private/letsencrypt-cert.pem'),\n    ca: fs.readFileSync(__dirname + '/../private/letsencrypt-ca.pem')\n};\nvar app = express();\nhttps.createServer(ssloptions, app).listen(2443);\n// var fbserver = fb;\n// fbserver.initializeApp({\n//     serviceAccount: __dirname + '/../private/sparkidxapi.json',\n//     databaseURL: \"https://sparkidxapi.firebaseio.com\"\n// });\n\nvar requests =  {};\nvar results  =  [];\nvar listings =  {};\n// var fbsdb = fbserver.database();\n// var fbsref = fbsdb.ref(\"/sparkauth/oauth\");\nvar access_token;\nvar refresh_token;\nvar code;\nvar expires_at;\nvar fbagentid;\nvar clientId;\nvar clientSecret;\nvar redirectUrl;\n// fbsref.on(\"value\", function(snapshot) {\n//     console.log(snapshot.val());\n//    let sparkauth = snapshot.val();\n//     code = sparkauth.code;\n//     clientId = sparkauth.client_id;\n//     clientSecret = sparkauth.client_secret;\n//     access_token = sparkauth.access_token;\n//     refresh_token = sparkauth.refresh_token;\n//     fbagentid = sparkauth.agentId;\n//     expires_at = sparkauth.expires_in;\n//     redirectUrl = sparkauth.redirect_uri\n//     console.log(\"The snapshot was updated!\"+JSON.stringify(sparkauth));\n// }, function (errorObject) {\n//     console.log(\"The read failed: \" + errorObject.code);\n// });\n// function setHeaders(){\n//     var headers;\n//     headers = {\n//         'X-SparkApi-User-Agent': `${apiAgent}`,\n//         'Authorization': `OAuth ${access_token}`,\n//         'Content-Type': 'application/json'\n//     };\n//     return headers;\n// }\n\n\nfunction getListingsWith(requestOption) {\n    return rp(requestOption)\n\n}\n\nvar fetchJSON = function(url) {\n    console.log('go url')\n    return new Promise(function(resolve, reject) {\n        setTimeout(() => resolve(url), 1*url);})\n        .catch((err) => console.log(\"error: \", err.message));\n\n}\nfunction getListings(pages, ops, res){\n    var lops = [];\n    for (var page = 1; page <= pages; page++) {\n        var pageReq = {};\n        Object.assign(pageReq, ops);\n        pageReq.qs._page = page;\n        lops.push(pageReq);}\n\n    var allops = lops.map(getListingJSON);\n    console.log(allops,'n');\n    Promise.all(allops)\n        .then(function(dataresults) {\n            // we only get here if ALL promises fulfill\n\n\n            dataresults.forEach(function(parsedBody) {\n\n                var entries = parsedBody.D.Results;\n\n                results.push(entries);\n                console.log(parsedBody.D.Pagination.page,'saving for page...');\n                saveListings(entries);\n                // process item\n            })\n            return res.send(dataresults);\n        })\n        .catch(function(err) {\n            // Will catch failure of first failed promise\n            console.log(\"Failed:\", err);\n        });\n}\n\napp.get('/remove', function (req, res) {\n    let idx = new SparkApiAuth();\n    let clearresults = SparkApiAuth.removeall();\n    res.send('cleared :'+clearresults)\n})\napp.get('/zip/:zipcode', function (req, res) {\n        var zipcode = req.params.zipcode;\n\n})\nfunction getListingJSON(options) {\n    pr = new reqrequire('request-promise')\n    return new Promise((resolve, reject) => {\n        pr(options)\n            .then((json) => resolve(json))\n            .catch((xhr, status, err) => reject(status + err.message));\n    });\n}\n\nfunction savePhotoData(entry,listingKey){\n    // var newPhotoKey = fbsdb.ref().child('listings/photos/'+listingKey).push().key;\n    var photoData = Photos.copy;\n    photoData =\n    {\n        ResourceUri: entry.ResourceUri,\n        Id: entry.Id,\n        Name: entry.Name,\n        Caption: entry.Caption,\n        UriThumb: entry.UriThumb,\n        Uri300: entry.Uri300,\n        Uri640: entry.Uri640,\n        Uri800: entry.Uri800,\n        Uri1024: entry.Uri1024,\n        Uri1280: entry.Uri1280,\n        Uri1600: entry.Uri1600,\n        Uri2048: entry.Uri2048,\n        UriLarge: entry.UriLarge,\n        Primary: entry.Primary\n    };\n    var updates = {};\n    // updates['/listings/photos/' + listingKey + '/' + entry.Id] = photoData;\n    // fbpromises.push(fbsdb.ref().update(updates));\n    return entry.Id;\n\n}\nfunction saveListings(listing) {\n\n    listings.forEach(function(listjson){\n            let newListingKey = listjson.Id;\n            var listingExists = false;\n            // var listingsRef = fbsdb.ref().child('listings/mlsid/');\n            // var newkey = firebase().database().ref('/listings/keys/').push().key\n            // var utiladd = new saveFlat(listjson,fbsdb);\n    })}\n\napp.get('/addr/:addr', function (req, res) {\n    let addr = req.params.addr;\n\n    let idx = new SparkApiAuth()\n    console.log('from');\n\n    let thefilter = \"PropertyType Eq 'A' And MlsStatus Eq 'Active' And (City Eq '\"+addr+\"' Or StreetAddress Eq '\"+addr+\"')\"\n    console.log(thefilter);\n\n    idx.getListings(req,res,thefilter)\n})\n\n\n\napp.listen(6980, function () {\n\n  console.log('Express server listening on port ' + 6980)\n\n})\n/*\n function getListingsWithOptions(options, page) {\n\n var Pagination =  {\n CurrentPage:    pBody.D.Pagination.CurrentPage,\n TotalPages:     pBody.D.Pagination.TotalPages\n };\n var pages = Pagination.TotalPages;\n var current = Pagination.CurrentPage;\n var nextPage = current++;\n if(nextPage<=pages) {\n\n var nextRp = rp.copy;\n return rp(options)\n .catch(function (e) {\n res.send(e + 'oops while getting listing');\n });\n }\n }\n\n Zip --\n // var options = setupReqOps('count',1,\"PostalCode Eq '\"+ zipcode +\"' And PropertyType Eq 'A'\")\n // var pageoptions = setupReqOps(1,1,\"PostalCode Eq '\"+ zipcode +\"' And PropertyType Eq 'A'\")\n var reqres = []\n\n // var promiseTo = fetchJSON(\n spark.countPagesAndRequestJson(access_token,fbsdb,{},zipcode)\n // var doingP = new Promise(function(resolve, reject) {\n //     setTimeout(() => resolve(promiseTo), 1*promiseTo);})\n //     .then(resolved=>{\n //         res.send(resolved)\n //     })\n //     .catch((err) => console.log(\"error: \", err.message));\n\n // res.send(promiseTo)\n // rp.get(options)\n //     .then(function (pBody) {\n //         let pageoptions = {\n //             url: 'https://sparkapi.com/v1/listings/',\n //             qs: {\n //                 // _select:    \"ListPrice,ListingId,StreetNumber,StreetName,City,PostalCode,PublicRemarks,BathsTotal,BedsTotal,Longitude,Latitude,SubdivisionName,BuildingAreaTotal,Photos,MlsStatus\",\n //                 _pagination:'1',\n //                 _page:      '1',\n //                 _orderby:   'ListPrice',\n //                 _filter:    \"PostalCode Eq '\"+ zipcode +\"' And PropertyType Eq 'A'\",\n //                 _limit:     '25',\n //                 _expand: 'PrimaryPhoto'\n //             },\n //             headers: setHeaders(),\n //             json: true\n //         };\n //         console.log(pBody.D)\n //         var ropsa = setupReqOps(1,1,\"PostalCode Eq '\"+ zipcode +\"' And PropertyType Eq 'A'\")\n //         getListings(pBody.D.Pagination.TotalPages, ropsa, res)\n //     })\n */\n\n"]}